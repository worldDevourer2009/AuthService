name: .NET Web API CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: worlddevourer2009/authservice-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 7

    strategy:
      matrix:
        dotnet-version: [ '9.0.x' ]

    env:
      ConnectionStrings__DefaultConnection: >-
        Host=localhost;
        Port=5432; 
        Database=authService;
        Username=authService_user;
        Password=authService_password;
      ConnectionStrings__Redis: localhost:6379
      
      JwtSettings__Issuer: test-issuer
      JwtSettings__Audience: test-audience
      JwtSettings__Key: ${{ secrets.JWT_KEY }}
      JwtSettings__Issuer_Prod: ${{ secrets.JWT_ISSUER }}
      JwtSettings__Audience_Prod: ${{ secrets.JWT_AUDIENCE }}
      JwtSettings__Key_Prod: ${{ secrets.JWT_KEY }}
      
      InternalAuth__ServiceClientSecret: ${{secrets.SERVICE_CLIENT_SECRET}}
      InternalAuth__ServiceClientId: ${{secrets.SERVICE_CLIENT_ID}}
      RsaKeySettings__KeyPath: './Keys/key.pem'
      RsaKeySettings__GenerateIfMissing: 'true'
      RsaKeySettings__KeySize: '2048'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: worldDevourer2009/TaskHandler-Services-Infrastructure
          token: ${{ secrets.INFRA_REPO_TOKEN }}
          ref: main
          path: infrastructure

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Configure GitHub NuGet source with authentication
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/worldDevourer2009/index.json" \
            --name github \
            --username ${{ github.actor }} \
            --password ${{ secrets.NUGET_TOKEN }} \
            --store-password-in-clear-text

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution with specific configuration
        run: |
          dotnet build --no-restore --configuration Release --verbosity normal
          dotnet build AuthService.Application/AuthService.Application.csproj --configuration Release --no-restore

      - name: List test projects
        run: |
          echo "Available test projects:"
          find . -name "*.Tests.csproj" -type f

      - name: Run tests with strict timeout
        run: |
          export ASPNETCORE_ENVIRONMENT=Testing
          export TESTCONTAINERS_RYUK_DISABLED=true
          export DOCKER_HOST=unix:///var/run/docker.sock
          
          timeout 300 dotnet test --no-build --configuration Release \
            --blame-hang-timeout 4m \
            --logger "console;verbosity=normal" \
            --results-directory TestResults \
            --verbosity minimal \
            --collect:"XPlat Code Coverage" \
            --settings test.runsettings || echo "Tests completed or timed out"
          
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs
          path: |
            **/*.log
            **/bin/**/*.log

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha
          labels: |
            maintainer=worldDevourer2009

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./AuthService.API/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            nuget_token=${{ secrets.NUGET_TOKEN }}

      - name: Install Docker Compose CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Prepare Keys directory
        run: |
          mkdir -p AuthService.API/Keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > AuthService.API/Keys/key.pem
          chmod 600 AuthService.API/Keys/key.pem  

      - name: Create Docker network "microservices"
        run: |
          docker network create microservices || echo "Network already exists"
          
      - name: Create Docker network "authService-network"
        run: |
          docker network create authService-network || echo "Network already exists"          
          
      - name: Export NUGET_TOKEN for Docker Compose
        run: echo "NUGET_TOKEN=${{ secrets.NUGET_TOKEN }}" >> $GITHUB_ENV    

      - name: Deploy infrastructure and services
        run: |
          cd infrastructure
          docker-compose up -d
          cd ..
          docker network create microservices-network || true
          export IMAGE_TAG=${{ github.sha }}
          export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}
          export ASPNETCORE_ENVIRONMENT=Production
          docker-compose down || true
          docker-compose up -d