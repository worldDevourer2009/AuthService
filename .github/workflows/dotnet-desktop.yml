name: .NET Web API CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: worlddevourer2009/authservice-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 7

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authService
          POSTGRES_USER: authService_user
          POSTGRES_PASSWORD: authService_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready --username=authService_user --dbname=authService"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,srvr"
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        ports:
          - 9092:9092
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        options: >-
          --health-cmd="kafka-broker-api-versions --bootstrap-server kafka:9092"
          --health-interval=15s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        dotnet-version: [ '9.0.x' ]

    env:
      ConnectionStrings__DefaultConnection: >-
        Host=localhost;
        Port=5432; 
        Database=authService;
        Username=authService_user;
        Password=authService_password;
      ConnectionStrings__Redis: localhost:6379
      
      JwtSettings__Issuer: test-issuer
      JwtSettings__Audience: test-audience
      JwtSettings__Key: MIHcAgEBBEIB7Ciph8O5ZeuVT46lzj7cRyPxZaiGxh1pvqnHIwNC/gXd6fDFmTOos8NQ+PSCQglLRpZv6rMp3j5FUsBcocT1OZmgBwYFK4EEACOhgYkDgYYABAFsumQXjiC/meBVIjpI2aRUH1v2YjOdVOzyrZKiqCNHfG7H9RMraMW6OO78EZAfMgSvr5TWieLYX3L0wyh2117osQGBEzePMBDxBnNBxZqg6AtPiXNyfRe0/vuukjdMSfgoQ37sMf9YOgNT7YRxpQUrrC90tv98eU5BTdaq7qhPNvY4tg==
      JwtSettings__Issuer_Prod: ${{ secrets.JWT_ISSUER }}
      JwtSettings__Audience_Prod: ${{ secrets.JWT_AUDIENCE }}
      JwtSettings__Key_Prod: ${{ secrets.JWT_KEY }}
      
      RsaKeySettings__KeyPath: './Keys/key.pem'
      RsaKeySettings__GenerateIfMissing: 'true'
      RsaKeySettings__KeySize: '2048'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: worldDevourer2009/TaskHandler-Services-Infrastructure
          token: ${{ secrets.INFRA_REPO_TOKEN }}
          ref: main
          path: infrastructure

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install PostgreSQL and Redis clients
        run: sudo apt-get update && sudo apt-get install -y postgresql-client redis-tools

      - name: Configure GitHub NuGet source with authentication
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/worldDevourer2009/index.json" \
            --name github \
            --username ${{ github.actor }} \
            --password ${{ secrets.NUGET_TOKEN }} \
            --store-password-in-clear-text

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution with specific configuration
        run: |
          dotnet build --no-restore --configuration Release --verbosity normal
          dotnet build AuthService.Application/AuthService.Application.csproj --configuration Release --no-restore

      - name: Wait for Postgres and Redis
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U authService_user; do
            sleep 2
          done
          echo "PostgreSQL is ready!"
          echo "Waiting for Redis to be ready..."
          until redis-cli -h localhost -p 6379 ping | grep -q PONG; do
            sleep 2
          done
          echo "Redis is ready!"

      - name: List test projects
        run: |
          echo "Available test projects:"
          find . -name "*.Tests.csproj" -type f

      - name: Run tests with environment variables
        run: |
          export ASPNETCORE_ENVIRONMENT=Testing
          dotnet test --no-build --configuration Release \
            --blame
            --logger "trx;LogFileName=test_results.trx" \
            --results-directory TestResults \
            --verbosity normal

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs
          path: |
            **/*.log
            **/bin/**/*.log

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha
          labels: |
            maintainer=worldDevourer2009

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./AuthService.API/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NUGET_TOKEN=${{ secrets.NUGET_TOKEN }}

      - name: Install Docker Compose CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Prepare Keys directory
        run: |
          mkdir -p AuthService.API/Keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > AuthService.API/Keys/key.pem
          chmod 600 AuthService.API/Keys/key.pem  

      - name: Create Docker network "microservices"
        run: |
          docker network create microservices || echo "Network already exists"
          
      - name: Create Docker network "authService-network"
        run: |
          docker network create authService-network || echo "Network already exists"          
          
      - name: Export NUGET_TOKEN for Docker Compose
        run: echo "NUGET_TOKEN=${{ secrets.NUGET_TOKEN }}" >> $GITHUB_ENV    

      - name: Deploy infrastructure and services
        run: |
          cd infrastructure
          docker-compose up -d
          cd ..
          docker network create microservices-network || true
          export IMAGE_TAG=${{ github.sha }}
          export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}
          export ASPNETCORE_ENVIRONMENT=Production
          docker-compose down || true
          docker-compose up -d
